int max;
void mouseClicked(){
  // 4 foi o valor máximo mais interessante em termos de resolução do floco de neve e velocidade de renderização
  if (max < 4){
    max += 1;
  } else {
    max = 0;
  }
}

void setup(){
  size(600,600);
}

void draw(){
  background(50);
  beginShape();
  koch(300, 100, 100, 450, 0);
  koch(100, 450, 500, 450, 0);
  koch(500, 450, 300, 100, 0);
  koch(400, 275, 200, 275, 0);
  koch(200, 275, 300, 450, 0);
  koch(300, 450, 400, 275, 0);
  koch2(300, 100, 100, 450, 0);
  koch2(100, 450, 500, 450, 0);
  koch2(500, 450, 300, 100, 0);
  koch2(400, 275, 200, 275, 0);
  koch2(200, 275, 300, 450, 0);
  koch2(300, 450, 400, 275, 0);
}

float[] roda(float ax, float ay, float bx, float by, float ang){
  float _px = ((bx-ax)*cos(ang) - (by-ay)*sin(ang))+ax;
  float _py = ((bx-ax)*sin(ang) + (by-ay)*cos(ang))+ay;
  return new float[] { _px, _py };
}

void koch(float x0, float y0, float xf, float yf, int nivel){
  if(nivel == max){
    stroke(255);
    line(x0, y0, xf, yf);
  } else {
    beginShape();
    float x1 = (1-(1/3.0))*x0 + (1/3.0)*xf;
    float y1 = (1-(1/3.0))*y0 + (1/3.0)*yf;
    float x3 = (1-(2/3.0))*x0 + (2/3.0)*xf;
    float y3 = (1-(2/3.0))*y0 + (2/3.0)*yf;
    float retorno[] = roda(x1,y1,x3,y3,PI/3);

    koch(x0,y0,x1,y1,nivel+1);
    koch(x1,y1,retorno[0],retorno[1],nivel+1);
    koch(retorno[0],retorno[1],x3,y3,nivel+1);
    koch(x3,y3,xf,yf,nivel+1);

    koch2(x0,y0,x1,y1,nivel+1);
    koch2(x1,y1,retorno[0],retorno[1],nivel+1);
    koch2(retorno[0],retorno[1],x3,y3,nivel+1);
    koch2(x3,y3,xf,yf,nivel+1);

    endShape(CLOSE);

  }
}

void koch2(float x0, float y0, float xf, float yf, int nivel){
  if(nivel == max){
    stroke(255);
    line(x0, y0, xf, yf);
  } else {
    beginShape();
    float x1 = (1-(1/3.0))*x0 + (1/3.0)*xf;
    float y1 = (1-(1/3.0))*y0 + (1/3.0)*yf;
    float x3 = (1-(2/3.0))*x0 + (2/3.0)*xf;
    float y3 = (1-(2/3.0))*y0 + (2/3.0)*yf;
    float retorno[] = roda(x1,y1,x3,y3,-PI/3);


    koch(x0,y0,x1,y1,nivel+1);
    koch(x1,y1,retorno[0],retorno[1],nivel+1);
    koch(retorno[0],retorno[1],x3,y3,nivel+1);
    koch(x3,y3,xf,yf,nivel+1);

    koch2(x0,y0,x1,y1,nivel+1);
    koch2(x1,y1,retorno[0],retorno[1],nivel+1);
    koch2(retorno[0],retorno[1],x3,y3,nivel+1);
    koch2(x3,y3,xf,yf,nivel+1);

    endShape(CLOSE);

  }
}
